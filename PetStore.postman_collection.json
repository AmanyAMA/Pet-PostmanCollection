{
	"info": {
		"_postman_id": "f906f7cc-d4a9-43e6-bd2b-785523559f23",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10740407",
		"_collection_link": "https://www.postman.com/oup-ocp/workspace/petstore/collection/10740407-f906f7cc-d4a9-43e6-bd2b-785523559f23?action=share&source=collection_link&creator=10740407"
	},
	"item": [
		{
			"name": "1.Pet",
			"item": [
				{
					"name": "1.1CreateNewPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC3]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//check id length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC5]-Check id length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"//Check Pet_ID value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC6]- Check response pet ID is: \" + JSON.parse(responseBody).id, function () {\r",
									"    pm.expect(JSON.parse(request.data).id).to.be.equal(JSON.parse(responseBody).id)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category object **********************************\r",
									"\r",
									"//check response body contain category object \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC7]- Check respose schema contain category property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"});\r",
									"//check category is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC8]- Check category is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(undefined)\r",
									"});\r",
									"//check category is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC9]- Check category is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal('object')\r",
									"});\r",
									"\r",
									"/*Check category object attributes\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC10]- Check category is number/data type \", function () {\r",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"id\")) {\r",
									"        console.log(\"The Category object has the property 'id' and property 'name'\");\r",
									"    }\r",
									"    else if (JSON.parse(responseBody).category.hasOwnProperty(\"name\")) {\r",
									"        console.log(\"The Category object has the property 'name' \")\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Category object does not have the property 'id' or property'name'\")\r",
									"    }\r",
									"});*/\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category ID **********************************\r",
									"\r",
									"//check response body contain Category_ID \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC11]- Check respose schema contain category_ID property\", function () {\r",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"id\")) {\r",
									"        pm.expect(JSON.parse(responseBody).category).to.haveOwnProperty('id')\r",
									"    } else { pm.expect(\"The Category object does not have the property 'category_ID'\"); }\r",
									"});\r",
									"\r",
									"//check Category_ID is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC12]- Check category_ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_ID  is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC13]- Check category_ID is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check Category_ID length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC14]-  Check category_ID length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).category.id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"//Check Category_ID value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC15]- Check category_ID in response is: \" +JSON.parse(responseBody).category.hasOwnProperty(\"id\"), function () {\r",
									"    pm.expect(JSON.parse(request.data).category.hasOwnProperty(\"id\")).to.be.equal(JSON.parse(responseBody).category.hasOwnProperty(\"id\"))\r",
									"});\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for Category Name **********************************\r",
									"\r",
									"//check response body contain Category_Name \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC16]- Check respose schema contain category_name property\", function () {\r",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"name\")) {\r",
									"        pm.expect(JSON.parse(responseBody).category).to.haveOwnProperty('name')\r",
									"    } else { pm.expect(\"The Category object does not have the property 'name'\"); }\r",
									"});\r",
									"\r",
									"//check Category_name is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC17]- Check category_name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC18]- Check category_name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check Category_name length less than 10 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC19]-  Check category_name length is greater than 10 chars\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.greaterThan(7)\r",
									"});\r",
									"\r",
									"//Check Category_name value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC20]- Check category_name in response is: \" +JSON.parse(responseBody).category.hasOwnProperty(\"name\"), function () {\r",
									"    pm.expect(JSON.parse(request.data).category.hasOwnProperty(\"name\")).to.be.equal(JSON.parse(responseBody).category.hasOwnProperty(\"name\"))\r",
									"});\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for  Name *****************************************\r",
									"\r",
									"//check response body contain name \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC21]- Check respose schema contain name property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name)\r",
									"});\r",
									"\r",
									"//check name is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC22]- Check name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC23]- Check name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check name length greater than 10 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC24]-  Check name length is greater than 10 chars\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).name).length).to.be.greaterThan(10)\r",
									"});\r",
									"\r",
									"//Check name value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC25]-  Check name in response is: \" + JSON.parse(responseBody).name, function () {\r",
									"    pm.expect(JSON.parse(request.data).name).to.be.equal(JSON.parse(responseBody).name)\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************** TCs for  PhotoUrls *****************************************\r",
									"\r",
									"//check response body contain PhotoUrls \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC26]- Check respose schema contain PhotoUrls property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is not nulll\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC27]- Check PhotoUrls is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is array  data type\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC28]- Check PhotoUrls is array data type \", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls))\r",
									"});\r",
									"\r",
									"//Check  PhotoUrls in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC29]-  Check PhotoUrls in response is: \" + JSON.parse(responseBody).PhotoUrls, function () {\r",
									"    pm.expect(JSON.parse(request.data).PhotoUrls).to.be.equal(JSON.parse(responseBody).PhotoUrls)\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// ******************************************* TCs for  Tags *****************************************\r",
									"\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"\r",
									"//check response body contain Tags attribute  \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC30]- Check respose schema contain Tags property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags)\r",
									"});\r",
									"\r",
									"//check Tags array is not null\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC31]- Check name is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Tags  is array (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC32]- Check name is String data type \", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags))\r",
									"});\r",
									"\r",
									"//check Tags is array of object instances\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC33]- Check n Tags is array of object instances \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(typeof tag).to.be.equal('object') \r",
									"}\r",
									"});\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for  Tags Id instance  ***********************************\r",
									"\r",
									"//Check the ID enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC34]- Check  Tags_id  is enstance of the tags array of objects \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.hasOwnProperty('id'))}\r",
									"});\r",
									"\r",
									"//Check the ID enstance ia anumber\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC35]- Check n Tags_id object ID instance \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(typeof tag.id).to.be.equal('number')}\r",
									"});\r",
									"\r",
									"//Check the id enstance length is greater than 13\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC36]- Check the Tags_id length is greater than 13 \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"pm.expect(toString(tag.id).length).to.be.greaterThan(13)\r",
									"  }\r",
									"});\r",
									"\r",
									"//Check the Tags_id enstance is not null \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC3]- Check Tags_id is not null\", function () {\r",
									"    for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.id).to.not.equal(null)\r",
									"    pm.expect(tag.id).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"//Check Tags_id  value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC29]-  Check Tags_id  value in response: \" + JSON.parse(responseBody).tags[0].id, function () {\r",
									"    pm.expect(JSON.parse(request.data).tags[0].id).to.be.equal(JSON.parse(responseBody).tags[0].id)\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for Tags name instance  ***********************************\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC37]- Check the Tags_name is enstance of the tags array of objects \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.hasOwnProperty('name'))}\r",
									"});\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC38]- Check the Tags_name enstance is type of name \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"  pm.expect(typeof tag.name).to.be.equal('string')\r",
									"  }\r",
									"});\r",
									"\r",
									"//Check the name enstance length is less than 10\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC39]- Check the Tags_name length is greater than 10 \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"pm.expect(toString(tag.name).length).to.be.greaterThan(13)\r",
									"}\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC40]- Check Tags_name is not null\", function () {\r",
									"    for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.name).to.not.equal(null)\r",
									"    pm.expect(tag.name).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"//Check Tags_name  value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC41]-  Check Tags_name  value in response: \" + JSON.parse(responseBody).tags[0].name, function () {\r",
									"    pm.expect(JSON.parse(request.data).tags[0].name).to.be.equal(JSON.parse(responseBody).tags[0].name)\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// *********************************************  TCs for status  ***********************************\r",
									"\r",
									"//Check respose schema contain status property\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC42]- Check respose schema contain status property \", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									"\r",
									"//Check the status property type of string\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC43]- Check the status property type of string \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"\r",
									"});\r",
									"// Check the status property not null/undifiend\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC44]- Check status property  is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check value in response\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC45]-  Check status property   value in response: \" + JSON.parse(request.data).tags.id, function () {\r",
									"    pm.expect(JSON.parse(request.data).status).to.be.equal(JSON.parse(responseBody).status)\r",
									"});\r",
									"\r",
									"/*Check status  value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC46]-  Check status property value on of entered data: \" + JSON.parse(responseBody).status, function () {\r",
									"    pm.expect(JSON.parse(request.data).status).to.be.equal(JSON.parse(responseBody).status)\r",
									"});*/\r",
									"\r",
									"pm.collectionVariables.set('name',JSON.parse(request.data).name)\r",
									"pm.collectionVariables.set('pet_status',JSON.parse(request.data).status)  \r",
									"pm.collectionVariables.set(\"pet_id\",JSON.parse(request.data).id) \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string between 8 and 10\r",
									"\r",
									"function generateRandomStringWithLetters(minLength, maxLength) {\r",
									"  const characterPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const stringLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < stringLength; i++) {\r",
									"    randomString += characterPool[Math.floor(Math.random() * characterPool.length)];\r",
									"  }\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"category_name\", generateRandomStringWithLetters(8, 10));\r",
									"pm.collectionVariables.set(\"name\", generateRandomStringWithLetters(8, 10));\r",
									"pm.collectionVariables.set(\"tags_name\", generateRandomStringWithLetters(8, 10));\r",
									"\r",
									"\r",
									"/* =============================================================================================== */\r",
									"\r",
									"// Generate a random number between 100 and 1000\r",
									"\r",
									"function generateRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"category_id\", generateRandomNumber(100, 1000));\r",
									"pm.collectionVariables.set(\"id\", generateRandomNumber(100, 1000));\r",
									"pm.collectionVariables.set(\"tags_id\", generateRandomNumber(100, 1000));\r",
									"\r",
									"\r",
									"/* ============================================================================================== */\r",
									"\r",
									"//Random selection for Status\r",
									"const stringArray = [\"available\", \"pending\",\"sold\"];\r",
									"const randomIndex = Math.floor(Math.random() * stringArray.length);\r",
									"pm.collectionVariables.set(\"status\",stringArray[randomIndex]);\r",
									"\r",
									"/* ============================================================================================== */\r",
									"\r",
									"//Random selection for PhotoURL\r",
									"const imageURLs = [\r",
									"  \"https://picsum.photos/200/300\",\r",
									"  \"https://picsum.photos/300/200\",\r",
									"  \"https://picsum.photos/400/300\"\r",
									"];\r",
									"\r",
									"const Pic_randomIndex = Math.floor(Math.random() * imageURLs.length);\r",
									"const randomImageURL = imageURLs[randomIndex];\r",
									"pm.collectionVariables.set(\"photo_Urls\", imageURLs[Pic_randomIndex]);\r",
									"\r",
									"/* ============================================================================================== */\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{id}},\r\n  \"category\": {\r\n    \"id\": {{category_id}},\r\n    \"name\": \"{{category_name}}\"\r\n  },\r\n  \"name\": \"{{name}}\",\r\n  \"photoUrls\": [\r\n    \"{{photo_Urls}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{tags_id}},\r\n      \"name\": \"{{tags_name}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/pet/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"pet",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2FindPetByStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC1]-Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//=================================================================================================",
									"// ****************************************** TCS for ID  *****************************************",
									"const arrayOfObjects = JSON.parse(responseBody);",
									"//check response body contain id ",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC2]- Check respose schema contain id property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(object).to.have.property(\"id\")",
									"    }",
									"});",
									"//check id is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC3]- Check ID is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(object.id).to.not.equal(null)",
									"        pm.expect(object.id).to.not.equal(undefined)",
									"    }",
									"});",
									"//check id value is integer/number (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC4]- Check id is number/data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(typeof object.id).to.be.equal('number')",
									"    }",
									"});",
									"//Check id is includes numbers only",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC5]-Check id is includes numbers only\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(object.id).to.match(/^\\d+$/)",
									"    }",
									"});",
									"",
									"//=================================================================================================",
									"// ************************************** TCS for Category object **********************************",
									"",
									"//check response body contain category object ",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC6]- Check respose schema contain category property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"            pm.expect(object).to.have.property(\"category\")",
									"        }",
									"    }",
									"});",
									"//check category is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC7]- Check category is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(object.category).to.not.equal(null)",
									"    }",
									"});",
									"//check category is object (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC8]- Check category is number/data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"            pm.expect(typeof object.category).to.be.equal('object')",
									"        }",
									"    }",
									"});",
									"",
									"/*Check category object attributes",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC10]- Check category is number/data type \", function () {",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"id\")) {",
									"        console.log(\"The Category object has the property 'id' and property 'name'\");",
									"    }",
									"    else if (JSON.parse(responseBody).category.hasOwnProperty(\"name\")) {",
									"        console.log(\"The Category object has the property 'name' \")",
									"    }",
									"    else {",
									"        console.log(\"Category object does not have the property 'id' or property'name'\")",
									"    }",
									"});*/",
									"//=================================================================================================",
									"// ************************************** TCS for Category ID **********************************",
									"",
									"//check response body contain Category_ID ",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC9]- Check respose schema contain category_ID property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"            pm.expect(object.category).to.haveOwnProperty('id')",
									"        }",
									"        else { pm.expect(\"The Category object does not have the property 'category_ID'\"); }",
									"    }",
									"});",
									"",
									"//check Category_ID is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC10]- Check category_ID is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"            pm.expect(object.category.id).to.not.equal(null)",
									"        }",
									"    }",
									"});",
									"",
									"//check Category_ID  is integer/number (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC11]- Check category_ID is number/data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"            pm.expect(typeof object.category.id).to.be.equal('number')",
									"        }",
									"    }",
									"});",
									"",
									"//Check Category_ID is includes numbers only",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC12]-Check Category_ID is includes numbers only\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        pm.expect(object.id).to.match(/^\\d+$/)",
									"    }",
									"});",
									"",
									"//===============================================================================================",
									"// ************************************** TCS for Category Name **********************************",
									"",
									"//check response body contain Category_Name",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC13]- Check respose schema contain category_name property\", function (){",
									"     for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"    if (object.category.hasOwnProperty(\"name\")) {",
									"        pm.expect(object.category).to.haveOwnProperty('name')",
									"    } else { pm.expect(\"The Category object does not have the property 'name'\"); }}}",
									"});",
									"",
									"//check Category_name is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC14]- Check category_name is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"        if (object.category !== undefined) {",
									"    pm.expect(object.category.name).to.not.equal(null)}}",
									"});",
									"",
									"//check Category_name  is String (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC15]- Check category_name is String data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.category !== undefined) {",
									"    pm.expect(typeof  object.category.name).to.be.equal('string')}}",
									"});",
									"",
									"//Check Category_name length less than 10 digit",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC16]-  Check category_name length is greater than 1 chars\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.category !== undefined) {",
									"    pm.expect(toString(object.category.name).length).to.be.greaterThan(1)}}",
									"});",
									"",
									"//Check Category_name is includes letters only",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC17]-Check Category_name is includes letters only\", function () {",
									"     for (const object of arrayOfObjects) {",
									"    if (object.category !== undefined) {",
									"    pm.expect(object.category.name).to.match(/^[a-zA-Z]+$/)}}",
									"});",
									"",
									"//===============================================================================================",
									"// ************************************** TCS for  Name *****************************************",
									"",
									"//check response body contain name",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC18]- Check respose schema contain name property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    pm.expect(object.name)}",
									"});",
									"",
									"//check name is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC19]- Check name is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    pm.expect(object.name).to.not.equal(null)",
									"    pm.expect(object.name).to.not.equal(undefined)}",
									"});",
									"",
									"//check name  is String (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC20]- Check name is String data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"    pm.expect(typeof object.name).to.be.equal('string')}",
									"});",
									"",
									"//Check name length greater than 10 digit",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC21]-  Check name length is greater than 1 chars\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    pm.expect(toString(object.name).length).to.be.greaterThan(1)}",
									"});",
									"",
									"//Check name is includes letters only",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC22]-Check name is includes letters only\", function () {",
									"     for (const object of arrayOfObjects) {",
									"    pm.expect(object.name).to.match(/^[a-zA-Z]+$/)}",
									"});",
									"",
									"//====================================================================================================",
									"// ************************************** TCs for  PhotoUrls *****************************************",
									"",
									"//check response body contain PhotoUrls",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC23]- Check respose schema contain PhotoUrls property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {",
									"    pm.expect(object.photoUrls)}}",
									"});",
									"",
									"//Check PhotoUrls is not nulll",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC24]- Check PhotoUrls is not null\", function () {",
									"        for (const object of arrayOfObjects) {",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {",
									"    pm.expect(Array.isArray(object.photoUrls)).to.not.equal(null)",
									"    pm.expect(Array.isArray(object.photoUrls)).to.not.equal(undefined)}}",
									"});",
									"",
									"//Check PhotoUrls is array  data type",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC25]- Check PhotoUrls is array data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {",
									"    pm.expect(Array.isArray(object.photoUrls))}}",
									"});",
									"",
									"//====================================================================================================",
									"// ******************************************* TCs for  Tags *****************************************",
									"",
									"",
									"//check response body contain Tags attribute",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC26]- Check respose schema contain Tags property\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.tags !== undefined) {",
									"    pm.expect(object).haveOwnProperty(\"tags\")}}",
									"});",
									"",
									"//check Tags array is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC27]- Check name is not null\", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.tags !== undefined) {",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(null)",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(undefined)}}",
									"});",
									"",
									"//check Tags  is array (data type)",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC32]- Check name is String data type \", function () {",
									"    for (const object of arrayOfObjects) {",
									"    if (object.tags !== undefined) {",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags))}}",
									"});",
									"",
									"//check Tags is array of object instances",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC28]- Check n Tags is array of object instances \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags)",
									"     if (tag !== null && tag !== undefined ) {",
									"    pm.expect(typeof tag).to.be.equal('object')}",
									"}",
									"});",
									"//====================================================================================================",
									"// ************************************ TCs for  Tags Id instance  ***********************************",
									"",
									"//Check the ID enstance for the tags array of objects",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC29]- Check  Tags_id  is enstance of the tags array of objects \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"    pm.expect(tag.hasOwnProperty('id'))}}}",
									"});",
									"",
									"//Check the ID enstance ia anumber",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC30]- Check n Tags_id object ID instance \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"    pm.expect(typeof tag.id).to.be.equal('number')}}}",
									"});",
									"",
									"//Check the id enstance length is greater than 13",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC31]- Check the Tags_id length is greater than 13 \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"pm.expect(toString(tag.id).length).to.be.greaterThan(13)",
									"  }}}",
									"});",
									"",
									"//Check the Tags_id enstance is not null",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC32]- Check Tags_id is not null\", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"    pm.expect(tag.id).to.not.equal(null)",
									"    pm.expect(tag.id).to.not.equal(undefined)}}}",
									"});",
									"",
									"",
									"",
									"//====================================================================================================",
									"// ************************************ TCs for Tags name instance  ***********************************",
									"",
									"//Check the name enstance for the tags array of objects",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC33]- Check the Tags_name is enstance of the tags array of objects \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"    pm.expect(tag.hasOwnProperty('name'))}}}",
									"});",
									"",
									"//Check the name enstance for the tags array of objects",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC34]- Check the Tags_name enstance is type of name \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag.name !== null && tag.name !== undefined ) {",
									"  pm.expect(typeof tag.name).to.be.equal('string')",
									"  }}}",
									"});",
									"",
									"//Check the name enstance length is less than 10",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC35]- Check the Tags_name length is greater than 10 \", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag !== null && tag !== undefined ) {",
									"pm.expect(toString(tag.name).length).to.be.greaterThan(13)",
									"}}}",
									"});",
									"",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC36]- Check Tags_name is not null\", function () {",
									" for (const object of arrayOfObjects) {",
									"     for(const tag of object.tags){",
									"     if (tag.name !== null && tag.name !== undefined ) {",
									"    pm.expect(tag.name).to.not.equal(null)",
									"    pm.expect(tag.name).to.not.equal(undefined)}}}",
									"});",
									"",
									"//====================================================================================================",
									"// *********************************************  TCs for status  ***********************************",
									"",
									"//Check respose schema contain status property",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC37]- Check respose schema contain status property \", function () {",
									"     for (const object of arrayOfObjects) {",
									"    pm.expect(object).to.have.property(\"status\")}",
									"});",
									"",
									"//Check the status property type of string",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC38]- Check the status property type of string \", function () {",
									"    for (const object of arrayOfObjects) {",
									"    pm.expect(typeof object.status).to.be.equal(\"string\")}",
									"",
									"});",
									"// Check the status property not null/undifiend",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC39]- Check status property  is not null\", function () {",
									"     for (const object of arrayOfObjects) {",
									"    pm.expect(object.status).to.not.equal(null)",
									"    pm.expect(object.status).to.not.equal(undefined)}",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/v2/pet/findByStatus?status={{pet_status}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "{{pet_status}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3GetPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC3]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//check id length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC5]-Check id length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"//Check Pet_ID value in response \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC6]- Check response pet ID is: \" + JSON.parse(responseBody).id, function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"pet_id\")).to.be.equal(JSON.parse(responseBody).id)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category object **********************************\r",
									"\r",
									"//check response body contain category object \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC7]- Check respose schema contain category property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"});\r",
									"//check category is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC8]- Check category is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(undefined)\r",
									"});\r",
									"//check category is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC9]- Check category is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal('object')\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category ID **********************************\r",
									"\r",
									"//check response body contain Category_ID \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC10]- Check respose schema contain category_ID property\", function () {\r",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"id\")) {\r",
									"        pm.expect(JSON.parse(responseBody).category).to.haveOwnProperty('id')\r",
									"    } else { pm.expect(\"The Category object does not have the property 'category_ID'\"); }\r",
									"});\r",
									"\r",
									"//check Category_ID is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC11]- Check category_ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_ID  is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC12]- Check category_ID is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check Category_ID length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC13]-  Check category_ID length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).category.id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for Category Name **********************************\r",
									"\r",
									"//check response body contain Category_Name \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC14]- Check respose schema contain category_name property\", function () {\r",
									"    if (JSON.parse(responseBody).category.hasOwnProperty(\"name\")) {\r",
									"        pm.expect(JSON.parse(responseBody).category).to.haveOwnProperty('name')\r",
									"    } else { pm.expect(\"The Category object does not have the property 'name'\"); }\r",
									"});\r",
									"\r",
									"//check Category_name is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC15]- Check category_name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC16]- Check category_name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check Category_name length less than 10 digit\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC17]-  Check category_name length is greater than 10 chars\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.greaterThan(7)\r",
									"});\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for  Name *****************************************\r",
									"\r",
									"//check response body contain name \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC18]- Check respose schema contain name property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name)\r",
									"});\r",
									"\r",
									"//check name is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC19]- Check name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC20]- Check name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check name length greater than 10 digit\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC21]-  Check name length is greater than 10 chars\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).name).length).to.be.greaterThan(10)\r",
									"});\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************** TCs for  PhotoUrls *****************************************\r",
									"\r",
									"//check response body contain PhotoUrls \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC22]- Check respose schema contain PhotoUrls property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is not nulll\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC23]- Check PhotoUrls is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is array  data type\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC24]- Check PhotoUrls is array data type \", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls))\r",
									"});\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// ******************************************* TCs for  Tags *****************************************\r",
									"\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"\r",
									"//check response body contain Tags attribute  \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC25]- Check respose schema contain Tags property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags)\r",
									"});\r",
									"\r",
									"//check Tags array is not null\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC26]- Check name is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Tags  is array (data type)\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC27]- Check name is String data type \", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags))\r",
									"});\r",
									"\r",
									"//check Tags is array of object instances\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC28]- Check n Tags is array of object instances \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(typeof tag).to.be.equal('object') \r",
									"}\r",
									"});\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for  Tags Id instance  ***********************************\r",
									"\r",
									"//Check the ID enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC29]- Check  Tags_id  is enstance of the tags array of objects \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.hasOwnProperty('id'))}\r",
									"});\r",
									"\r",
									"//Check the ID enstance ia anumber\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC30]- Check n Tags_id object ID instance \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(typeof tag.id).to.be.equal('number')}\r",
									"});\r",
									"\r",
									"//Check the id enstance length is greater than 13\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC31]- Check the Tags_id length is greater than 13 \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"pm.expect(toString(tag.id).length).to.be.greaterThan(13)\r",
									"  }\r",
									"});\r",
									"\r",
									"//Check the Tags_id enstance is not null \r",
									"pm.test(\"[1.Pet][1.3GetPet][TC32]- Check Tags_id is not null\", function () {\r",
									"    for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.id).to.not.equal(null)\r",
									"    pm.expect(tag.id).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for Tags name instance  ***********************************\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC33]- Check the Tags_name is enstance of the tags array of objects \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.hasOwnProperty('name'))}\r",
									"});\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC34]- Check the Tags_name enstance is type of name \", function () {\r",
									"const jsonData = JSON.parse(responseBody); \r",
									"for (const tag of jsonData.tags) {\r",
									"  pm.expect(typeof tag.name).to.be.equal('string')\r",
									"  }\r",
									"});\r",
									"\r",
									"//Check the name enstance length is less than 10\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC35]- Check the Tags_name length is greater than 10 \", function () {\r",
									"for (const tag of jsonData.tags) {\r",
									"pm.expect(toString(tag.name).length).to.be.greaterThan(13)\r",
									"}\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC36]- Check Tags_name is not null\", function () {\r",
									"    for (const tag of jsonData.tags) {\r",
									"    pm.expect(tag.name).to.not.equal(null)\r",
									"    pm.expect(tag.name).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// *********************************************  TCs for status  ***********************************\r",
									"\r",
									"//Check respose schema contain status property\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC37]- Check respose schema contain status property \", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									"\r",
									"//Check the status property type of string\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC38]- Check the status property type of string \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"\r",
									"});\r",
									"// Check the status property not null/undifiend\r",
									"pm.test(\"[1.Pet][1.3GetPet][TC39]- Check status property  is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/pet/{{pet_id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4UpdatePet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomStringWithLetters(minLength, maxLength) {\r",
									"  const characterPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const stringLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < stringLength; i++) {\r",
									"    randomString += characterPool[Math.floor(Math.random() * characterPool.length)];\r",
									"  }\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"updatedName\", generateRandomStringWithLetters(8, 10));\r",
									" //=============================================================================================\r",
									" //Random selection for Status\r",
									"const stringArray = [\"available\", \"unavailable\"];\r",
									"const randomIndex = Math.floor(Math.random() * stringArray.length);\r",
									"pm.collectionVariables.set(\"UpdatedStatus\",stringArray[randomIndex]);\r",
									"//console.log(\"UpdatedStatus: \"+pm.variables.get(\"status\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code \r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC2]- Check respose schema contain Code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//check response body contain type \r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC3]- Check respose schema contain Type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message \r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC4]]- Check respose schema contain Message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//check response Message  contain same pet id on Header \r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC5]]- Check response Message  contain same pet id on Header\", function () {\r",
									"    pm.expect(Number( JSON.parse(responseBody).message)).to.be.equals(pm.collectionVariables.get('pet_id'))\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"\r",
									"\r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC6]- Check \", function () {\r",
									"const request1 = {\r",
									"  url: 'https://petstore.swagger.io/v2/pet/'+pm.collectionVariables.get('pet_id'),method: 'GET',\r",
									"  headers: {'Content-Type': 'application/json'}};\r",
									"\r",
									"pm.sendRequest(request1, (err, data) => {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"   const response= data.json();\r",
									" pm.expect(pm.collectionVariables.get('updatedName')).to.be.equals(response.name)\r",
									" pm.expect(pm.collectionVariables.get('UpdatedStatus')).to.be.equals(response.status)\r",
									"});\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{updatedName}}",
									"type": "text"
								},
								{
									"key": "Status",
									"value": "{{UpdatedStatus}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/v2/pet/{{pet_id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5DeletePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.5DeletePet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code \r",
									"pm.test(\"[1.Pet][1.5DeletePet][TC2]- Check respose schema contain Code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//check response body contain type \r",
									"pm.test(\"[1.Pet][1.5DeletePet][TC3]- Check respose schema contain Type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message \r",
									"pm.test(\"[1.Pet][1.5DeletePet][TC4]- Check respose schema contain Message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//check response Message  contain same pet id on Header \r",
									"pm.test(\"[1.Pet][1.5DeletePet][TC5]- Check response Message  contain same pet id on Header\", function () {\r",
									"    pm.expect(Number( JSON.parse(responseBody).message)).to.be.equals(pm.collectionVariables.get('pet_id'))\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"\r",
									"pm.test(\"[1.Pet][1.4UpdatePet][TC6]- Check \", function () {\r",
									"const request1 = {\r",
									"  url: 'https://petstore.swagger.io/v2/pet/'+pm.collectionVariables.get('pet_id'),method: 'GET',\r",
									"  headers: {'Content-Type': 'application/json'}};\r",
									"\r",
									"pm.sendRequest(request1, (err, data) => {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"const res= data.json();\r",
									"pm.expect(res.code).to.be.equal(1)\r",
									"pm.expect(res.type).to.be.equal(\"error\")\r",
									"pm.expect(res.message).to.be.equal(\"Pet not found\")\r",
									"});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/v2/pet/{{pet_id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{pet_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2.Store",
			"item": [
				{
					"name": "2.1AddPetOrder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Random selection for Status\r",
									"const stringArray = [\"true\", \"false\"];\r",
									"const randomIndex = Math.floor(Math.random() * stringArray.length);\r",
									"pm.collectionVariables.set(\"complete_status\",stringArray[randomIndex]);\r",
									"\r",
									"// =================================================================================\r",
									"\r",
									"//Random selection for Status\r",
									"const arr = [\"placed\", \"completed\",\"inprogress\"];\r",
									"const index = Math.floor(Math.random() * arr.length);\r",
									"pm.collectionVariables.set(\"StoreStatus\",arr[index]);\r",
									"\r",
									"// =================================================================================\r",
									"\r",
									"// Generate a random number between 100 and 1000\r",
									"\r",
									"function generateRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"OrderID\", generateRandomNumber(1, 10));\r",
									"pm.collectionVariables.set(\"order_PetId\", generateRandomNumber(100, 1000));\r",
									"pm.collectionVariables.set(\"quantity\", generateRandomNumber(1, 100));\r",
									"\r",
									"// =================================================================================\r",
									" function generateRandomDate() {\r",
									"  const year = 2023;\r",
									"  const month = 11; // November\r",
									"  const day = 25;\r",
									"\r",
									"  const hours = Math.floor(Math.random() * 24);\r",
									"  const minutes = Math.floor(Math.random() * 60);\r",
									"  const seconds = Math.floor(Math.random() * 60);\r",
									"  const milliseconds = Math.floor(Math.random() * 1000);\r",
									"\r",
									"  const date = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\r",
									"  const formattedDate = date.toISOString();\r",
									"\r",
									"  return formattedDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"shipDate\", generateRandomDate())\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC3]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//Check id value to be from (0 -10) \r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC5]-Check id value to be less than 10 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.within(0, 10)\r",
									"\r",
									"});\r",
									"//Check id length is less than 2 digit\r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC6]-Check petId length is less than 2 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).id).toString().length).to.be.lessThan(2)\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC7]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for petId  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC8]- Check respose schema contain petId property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC9]- Check petId is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC10]- Check petId is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal('number')\r",
									"});\r",
									"//Check id length is less than 4 digit\r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC11]-Check petId length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).petId).toString().length).to.be.lessThan(4)\r",
									"\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC12]-Check petId is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for quantity  *****************************************\r",
									"\r",
									"//check response body contain quantity \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC13]- Check respose schema contain quantity property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"});\r",
									"//check quantity is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC14]- Check quantity is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(undefined)\r",
									"});\r",
									"//check quantity value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC15]- Check quantity is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.be.equal('number')\r",
									"});\r",
									"//Check id length is less than 3 digit\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC16]-Check quantity length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).quantity).toString().length).to.be.lessThan(3)\r",
									"\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC17]-Check quantity is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for status  *****************************************\r",
									"\r",
									"//check response body contain status \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC18]- Check respose schema contain status property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									"//check status is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC19]- Check status is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"//check status value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC20]- Check status is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal('string')\r",
									"});\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC21]- Check status is includes Letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC22]- Check status value\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.be.oneOf([\"placed\", \"completed\", \"inprogress\"])\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for shipDate  *****************************************\r",
									"\r",
									"//check response body contain shipDate \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC24]- Check respose schema contain complete property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"});\r",
									"//check shipDate is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC24]- Check shipDate is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(undefined)\r",
									"});\r",
									"//check shipDate value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC26]- Check shipDate is string type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).shipDate).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check shipDate value in response \r",
									"const timestamprequest =JSON.parse(request.data).shipDate;\r",
									"const timestampbody =JSON.parse(responseBody).shipDate;\r",
									"const [datePartbody, timePartbody] = timestampbody.split('+');\r",
									"const [datePartrequest, timePartrequest] = timestamprequest.split('Z');\r",
									"\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC6]- Check response shipDate is: \" + JSON.parse(responseBody).shipDate, function () {\r",
									"    pm.expect(datePartbody).to.be.equal(datePartrequest)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "con",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{OrderID}},\r\n  \"petId\": {{order_PetId}},\r\n  \"quantity\": {{quantity}},\r\n  \"shipDate\": \"{{shipDate}}\",\r\n  \"status\": \"{{StoreStatus}}\",\r\n  \"complete\": {{complete_status}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/store/order",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2GetOrderByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC3]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//Check id value to be from (0 -10) \r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC5]-Check id value to be less than 10 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.within(0, 10)\r",
									"\r",
									"});\r",
									"//Check id length is less than 2 digit\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC6]-Check petId length is less than 2 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).id).toString().length).to.be.lessThan(2)\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC7]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for petId  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC8]- Check respose schema contain petId property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC9]- Check petId is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC10]- Check petId is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal('number')\r",
									"});\r",
									"//Check id length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.3.1CreateUserArr][TC11]-Check petId length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).petId).toString().length).to.be.lessThan(4)\r",
									"\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][1.1CreateNewPet][TC12]-Check petId is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for quantity  *****************************************\r",
									"\r",
									"//check response body contain quantity \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC13]- Check respose schema contain quantity property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"});\r",
									"//check quantity is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC14]- Check quantity is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(undefined)\r",
									"});\r",
									"//check quantity value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC15]- Check quantity is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.be.equal('number')\r",
									"});\r",
									"//Check id length is less than 3 digit\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC16]-Check quantity length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).quantity).toString().length).to.be.lessThan(3)\r",
									"\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC17]-Check quantity is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for status  *****************************************\r",
									"\r",
									"//check response body contain status \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC18]- Check respose schema contain status property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									"//check status is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC19]- Check status is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"//check status value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC20]- Check status is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal('string')\r",
									"});\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC21]- Check status is includes Letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC22]- Check status value\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.be.oneOf([\"placed\", \"completed\", \"inprogress\"])\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for shipDate  *****************************************\r",
									"\r",
									"//check response body contain shipDate \r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC24]- Check respose schema contain complete property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"});\r",
									"//check shipDate is not null\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC24]- Check shipDate is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/store/order/{{OrderID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{OrderID}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3PetInventories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for sold  *****************************************\r",
									"\r",
									"//check response body contain sold property\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC2]- Check respose schema contain sold property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"sold\")\r",
									"});\r",
									"//check sold is not null\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC3]- Check sold is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(undefined)\r",
									"});\r",
									"//check id sold is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).sold).to.be.equal('number')\r",
									"});\r",
									"//Check sold value to be from (0 -10) \r",
									"pm.test(\"[2.Store][2.3PetInventories][TC5]-Check id value to be less than 10 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.be.within(1, 10)\r",
									"\r",
									"});\r",
									"//Check id length is less than 2 digit\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC6]-Check petId length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).sold).toString().length).to.be.lessThan(3)\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC7]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//=====================================================================================================\r",
									"// ****************************************** TCS for string  *****************************************\r",
									"\r",
									"//check response body contain string property\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC8]- Check respose schema contain string property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"string\")\r",
									"});\r",
									"//check string is not null\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC9]- Check string is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(undefined)\r",
									"});\r",
									"//check id string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC10]- Check string is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).string).to.be.equal('number')\r",
									"});\r",
									"//Check string length is less than 3 digit\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC11]-Check string length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).string).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check string is includes numbers only\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC12]-Check string is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for unavailable  **********************************\r",
									"\r",
									"//check response body contain unavailable property\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC8]- Check unavailable schema contain string property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"unavailable\")\r",
									"});\r",
									"//check unavailable is not null\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC9]- Check unavailable is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(undefined)\r",
									"});\r",
									"//check unavailable string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC10]- Check unavailable is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).string).to.be.equal('number')\r",
									"});\r",
									"//Check unavailable length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC11]-Check unavailable length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).string).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check unavailable is includes numbers only\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC12]-Check unavailable is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for pending  **********************************\r",
									"\r",
									"//check response body contain pending property\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC8]- Check unavailable schema contain string property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"pending\")\r",
									"});\r",
									"//check unavailable is not null\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC9]- Check unavailable is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.equal(undefined)\r",
									"});\r",
									"//check unavailable string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC10]- Check unavailable is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).pending).to.be.equal('number')\r",
									"});\r",
									"//Check unavailable length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC11]-Check unavailable length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).pending).toString().length).to.be.lessThan(2)\r",
									"});\r",
									"//Check unavailable is includes numbers only\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC12]-Check unavailable is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.match(/^\\d+$/)\r",
									"});\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for available  **********************************\r",
									"\r",
									"//check response body contain pending property\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC8]- Check unavailable schema contain string property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"available\")\r",
									"});\r",
									"//check unavailable is not null\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC9]- Check unavailable is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(undefined)\r",
									"});\r",
									"//check unavailable string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC10]- Check unavailable is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).available).to.be.equal('number')\r",
									"});\r",
									"//Check unavailable length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC11]-Check unavailable length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).available).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check unavailable is includes numbers only\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC12]-Check unavailable is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.match(/^\\d+$/)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/store/inventory/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"store",
								"inventory",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4DeleteOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//check response body contain type property\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC3]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"\r",
									"//===================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC4]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//check response body contain message property\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC4]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody.message)).to.be.equal(1)\r",
									"});\r",
									"\r",
									"//check  message value in response equal to orderID\r",
									"pm.test(\"[2.Store][2.4DeleteOrder][TC4]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody.message)).to.be.equal(pm.collectionVariables.get('OrderID'))\r",
									"});\r",
									"\r",
									"pm.test(\"[2.Store][1.4UpdatePet][TC6]- Check \", function () {\r",
									"const request1 = {\r",
									"  url: 'https://petstore.swagger.io/v2/order/'+pm.collectionVariables.get('OrderID'),method: 'DELETE',\r",
									"  headers: {'Content-Type': 'application/json'}};\r",
									"\r",
									"pm.sendRequest(request1, (err, data) => {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"const res= data.json();\r",
									"//pm.expect(res.code).to.be.equal(1)\r",
									"//pm.expect(res.type).to.be.equal(\"error\")\r",
									"//pm.expect(res.message).to.be.equal(\"Order not found\")\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/store/order/{{OrderID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{OrderID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3.User",
			"item": [
				{
					"name": "3.1CreateUserArr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][23.1CreateUserArr][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][1.1CreateNewPet][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal('ok')\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {\r",
									"  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * letters.length);\r",
									"    randomString += letters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"firstName\",generateRandomString(7));\r",
									"pm.collectionVariables.set(\"lastName\",generateRandomString(8));\r",
									"pm.collectionVariables.set(\"username\",generateRandomString(10));\r",
									"\r",
									"//==========================================================================================\r",
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"pm.collectionVariables.set(\"email\",generateRandomEmail());\r",
									"\r",
									"//==============================================================================================\r",
									"\r",
									"function generateRandomPassword(length) {\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const uppercaseLetters = lowercaseLetters.toUpperCase();\r",
									"  const numbers = '0123456789';\r",
									"  const symbols = '!@#$%^&*()-_+={}[]|:;\"<>,.?/';\r",
									"\r",
									"  const characters = lowercaseLetters + uppercaseLetters + numbers + symbols;\r",
									"  let password = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    password += characters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"password\",generateRandomPassword(15));\r",
									"//=====================================================================================================\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const egyptianMobilePrefixes = ['010', '011', '012', '015'];\r",
									"  const mobileNumberLength = 9;\r",
									"\r",
									"  const prefix = egyptianMobilePrefixes[Math.floor(Math.random() * egyptianMobilePrefixes.length)];\r",
									"  let mobileNumber = prefix;\r",
									"\r",
									"  for (let i = 0; i < mobileNumberLength; i++) {\r",
									"    const randomDigit = Math.floor(Math.random() * 10);\r",
									"    mobileNumber += randomDigit.toString();\r",
									"  }\r",
									"\r",
									"  return mobileNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"phone\",generateRandomEgyptianMobileNumber(15));\r",
									"//=================================================================================================\r",
									"function generateRandomId(length) {\r",
									"  const numbers = '0123456789';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * numbers.length);\r",
									"    randomId += numbers[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_id\",generateRandomId(3)) \r",
									"pm.collectionVariables.set(\"userStatus\",generateRandomId(2))\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{User_id}},\r\n    \"username\": \"{{username}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"userStatus\": {{userStatus}}\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/user/createWithArray",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2CreateUserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][23.1CreateUserArr][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][1.1CreateNewPet][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal('ok')\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {\r",
									"  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * letters.length);\r",
									"    randomString += letters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"firstName\",generateRandomString(7));\r",
									"pm.collectionVariables.set(\"lastName\",generateRandomString(8));\r",
									"pm.collectionVariables.set(\"username\",generateRandomString(10));\r",
									"\r",
									"//==========================================================================================\r",
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"pm.collectionVariables.set(\"email\",generateRandomEmail());\r",
									"\r",
									"//==============================================================================================\r",
									"\r",
									"function generateRandomPassword(length) {\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const uppercaseLetters = lowercaseLetters.toUpperCase();\r",
									"  const numbers = '0123456789';\r",
									"  const symbols = '!@#$%^&*()-_+={}[]|:;\"<>,.?/';\r",
									"\r",
									"  const characters = lowercaseLetters + uppercaseLetters + numbers + symbols;\r",
									"  let password = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    password += characters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"password\",generateRandomPassword(15));\r",
									"//=====================================================================================================\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const egyptianMobilePrefixes = ['010', '011', '012', '015'];\r",
									"  const mobileNumberLength = 9;\r",
									"\r",
									"  const prefix = egyptianMobilePrefixes[Math.floor(Math.random() * egyptianMobilePrefixes.length)];\r",
									"  let mobileNumber = prefix;\r",
									"\r",
									"  for (let i = 0; i < mobileNumberLength; i++) {\r",
									"    const randomDigit = Math.floor(Math.random() * 10);\r",
									"    mobileNumber += randomDigit.toString();\r",
									"  }\r",
									"\r",
									"  return mobileNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"phone\",generateRandomEgyptianMobileNumber(15));\r",
									"//=================================================================================================\r",
									"function generateRandomId(length) {\r",
									"  const numbers = '0123456789';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * numbers.length);\r",
									"    randomId += numbers[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_id\",generateRandomId(3)) \r",
									"pm.collectionVariables.set(\"userStatus\",generateRandomId(2))\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{User_id}},\r\n    \"username\": \"{{username}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"userStatus\": {{userStatus}}\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/user/createWithList",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][23.1CreateUserArr][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][1.1CreateNewPet][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('User_id'))\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {\r",
									"  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * letters.length);\r",
									"    randomString += letters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"firstName\",generateRandomString(7));\r",
									"pm.collectionVariables.set(\"lastName\",generateRandomString(8));\r",
									"pm.collectionVariables.set(\"username\",generateRandomString(10));\r",
									"\r",
									"//==========================================================================================\r",
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"pm.collectionVariables.set(\"email\",generateRandomEmail());\r",
									"\r",
									"//==============================================================================================\r",
									"\r",
									"function generateRandomPassword(length) {\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const uppercaseLetters = lowercaseLetters.toUpperCase();\r",
									"  const numbers = '0123456789';\r",
									"  const symbols = '!@#$%^&*()-_+={}[]|:;\"<>,.?/';\r",
									"\r",
									"  const characters = lowercaseLetters + uppercaseLetters + numbers + symbols;\r",
									"  let password = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    password += characters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"pm.collectionVariables.set(\"password\",generateRandomPassword(15));\r",
									"//=====================================================================================================\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const egyptianMobilePrefixes = ['010', '011', '012', '015'];\r",
									"  const mobileNumberLength = 9;\r",
									"\r",
									"  const prefix = egyptianMobilePrefixes[Math.floor(Math.random() * egyptianMobilePrefixes.length)];\r",
									"  let mobileNumber = prefix;\r",
									"\r",
									"  for (let i = 0; i < mobileNumberLength; i++) {\r",
									"    const randomDigit = Math.floor(Math.random() * 10);\r",
									"    mobileNumber += randomDigit.toString();\r",
									"  }\r",
									"\r",
									"  return mobileNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"phone\",generateRandomEgyptianMobileNumber(15));\r",
									"//=================================================================================================\r",
									"function generateRandomId(length) {\r",
									"  const numbers = '0123456789';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * numbers.length);\r",
									"    randomId += numbers[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_id\",generateRandomId(3)) \r",
									"pm.collectionVariables.set(\"userStatus\",generateRandomId(2))\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n  {\r\n    \"id\": {{User_id}},\r\n    \"username\": \"{{username}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"userStatus\": {{userStatus}}\r\n  }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/user",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4GetUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.4GetUser][TC1]- Status code is 404\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for id  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.4GetUser][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC3]- Check id is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.4GetUser][TC5]-Check id value in responce is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id.toString()).to.be.equal(pm.collectionVariables.get('User_id'))\r",
									"\r",
									"});\r",
									"//Check id length is less than 4 digit\r",
									"pm.test(\"[3.User][3.4GetUser][TC6]-Check id length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).id).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[3.User][3.4GetUser][TC7]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for username  *****************************************\r",
									"\r",
									"//(check response body contain username property \r",
									"pm.test(\"[3.User][3.4GetUser][TC8]- Check respose schema contain username property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"});\r",
									"//check username is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC9]- Check username is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(undefined)\r",
									"});\r",
									"//check username value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC10]- Check username is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).username).to.be.equal('string')\r",
									"});\r",
									"//Check username value equal to error\r",
									"pm.test(\"[3.User][3.4GetUser][TC11]- Check username value in responce is correct \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.be.equal(pm.collectionVariables.get('username'))\r",
									"\r",
									"});\r",
									"//Check username is includes letters only\r",
									"pm.test(\"[3.User][3.4GetUser][TC12]- Check username is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for firstName  *****************************************\r",
									"\r",
									"//check response body contain firstName property \r",
									"pm.test(\"[3.User][3.4GetUser][TC13]- Check respose schema contain firstName property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstName\")\r",
									"});\r",
									"//check firstName is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC14]- Check firstName is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(undefined)\r",
									"});\r",
									"//check firstName value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC15]- Check firstName is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstName).to.be.equal('string')\r",
									"});\r",
									"//Check firstName length is value is User not found \r",
									"pm.test(\"[3.User][3.4GetUser][TC16]-Check firstName value in thre response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.be.equal(pm.collectionVariables.get('firstName'))\r",
									"\r",
									"});\r",
									"//Check firstName is includes letters only\r",
									"pm.test(\"[3.User][3.4GetUser][TC17]- Check firstName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for lastName  *****************************************\r",
									"\r",
									"//check response body contain lastName property \r",
									"pm.test(\"[3.User][3.4GetUser][TC18]- Check respose schema contain lastName property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastName\")\r",
									"});\r",
									"//check lastName is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC19]- Check lastName is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(undefined)\r",
									"});\r",
									"//check lastName value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC20]- Check lastName is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastName).to.be.equal('string')\r",
									"});\r",
									"//Check lastName length  value is response is correct\r",
									"pm.test(\"[3.User][3.4GetUser][TC16]-Check lastName  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.be.equal(pm.collectionVariables.get('lastName'))\r",
									"\r",
									"});\r",
									"//Check lastName is includes letters only\r",
									"pm.test(\"[3.User][3.4GetUser][TC21]- Check lastName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for email  *****************************************\r",
									"\r",
									"//check response body contain email property \r",
									"pm.test(\"[3.User][3.4GetUser][TC22]- Check respose schema contain  email\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"});\r",
									"//check email is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC23]- Check email is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(undefined)\r",
									"});\r",
									"//check email value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC24]- Check email is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).email).to.be.equal('string')\r",
									"});\r",
									"//Check email length is value is response is correct\r",
									"pm.test(\"[3.User][3.4GetUser][TC25]-Check email  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.be.equal(pm.collectionVariables.get('email'))\r",
									"\r",
									"});\r",
									"/*Check lastName is includes letters only\r",
									"pm.test(\"[3.User][3.4GetUser][TC12]- Check lastName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.match(/^[a-zA-Z]+$/)\r",
									"});*/\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for password  *****************************************\r",
									"\r",
									"//check response body contain password property \r",
									"pm.test(\"[3.User][3.4GetUser][TC26]- Check respose schema contain  password\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"});\r",
									"//check password is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC27]- Check password is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(undefined)\r",
									"});\r",
									"//check password value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC28]- Check password is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).password).to.be.equal('string')\r",
									"});\r",
									"//Check password length is value is response is correct \r",
									"pm.test(\"[3.User][3.4GetUser][TC29]- Check password  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.be.equal(pm.collectionVariables.get('password'))\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for phone  *****************************************\r",
									"\r",
									"//check response body contain phone property \r",
									"pm.test(\"[3.User][3.4GetUser][TC30]- Check respose schema contain  phone\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\")\r",
									"});\r",
									"//check phone is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC31]- Check phone is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.equal(undefined)\r",
									"});\r",
									"//check phone value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC32]- Check phone is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).phone).to.be.equal('string')\r",
									"});\r",
									"//Check phone  value in response is correct \r",
									"pm.test(\"[3.User][3.4GetUser][TC33]- Check phone  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.be.equal(pm.collectionVariables.get('phone'))\r",
									"});\r",
									"//Check phone length should be 12 digits\r",
									"pm.test(\"[3.User][3.4GetUser][TC34]- Check phone  value is response is correct  \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).phone).length).to.be.equal(12)\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for userStatus  *****************************************\r",
									"\r",
									"//check response body contain userStatus property \r",
									"pm.test(\"[3.User][3.4GetUser][TC35]- Check respose schema contain  userStatus\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userStatus\")\r",
									"});\r",
									"//check userStatus is not null\r",
									"pm.test(\"[3.User][3.4GetUser][TC36]- Check phone is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(undefined)\r",
									"});\r",
									"//check userStatus value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC37]- Check phone is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).userStatus).to.be.equal('number')\r",
									"});\r",
									"//Check userStatus  value in response is correct \r",
									"pm.test(\"[3.User][3.4GetUser][TC38]- Check phone  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus.toString()).to.be.equal(pm.collectionVariables.get('userStatus'))\r",
									"});\r",
									"//Check userStatus length should be 12 digits\r",
									"pm.test(\"[3.User][3.4GetUser][TC39]- Check phone  value is response is correct  \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).userStatus).toString().length).to.be.lessThan(3)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/v2/user/{{username}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5PutUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {\r",
									"  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * letters.length);\r",
									"    randomString += letters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"Updated_firstName\",generateRandomString(7));\r",
									"pm.collectionVariables.set(\"Updated_lastName\",generateRandomString(8));\r",
									"pm.collectionVariables.set(\"Updated_userName\",generateRandomString(10));\r",
									"\r",
									"//==========================================================================================\r",
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"pm.collectionVariables.set(\"Updated_email\",generateRandomEmail());\r",
									"\r",
									"//==============================================================================================\r",
									"\r",
									"function generateRandomPassword(length) {\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const uppercaseLetters = lowercaseLetters.toUpperCase();\r",
									"  const numbers = '0123456789';\r",
									"  const symbols = '!@#$%^&*()-_+={}[]|:;\"<>,.?/';\r",
									"\r",
									"  const characters = lowercaseLetters + uppercaseLetters + numbers + symbols;\r",
									"  let password = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    password += characters[randomIndex];\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"//pm.collectionVariables.set(\"Updated_password\",generateRandomPassword(15));\r",
									"//=====================================================================================================\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const egyptianMobilePrefixes = ['010', '011', '012', '015'];\r",
									"  const mobileNumberLength = 9;\r",
									"\r",
									"  const prefix = egyptianMobilePrefixes[Math.floor(Math.random() * egyptianMobilePrefixes.length)];\r",
									"  let mobileNumber = prefix;\r",
									"\r",
									"  for (let i = 0; i < mobileNumberLength; i++) {\r",
									"    const randomDigit = Math.floor(Math.random() * 10);\r",
									"    mobileNumber += randomDigit.toString();\r",
									"  }\r",
									"\r",
									"  return mobileNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"Updated_phone\",generateRandomEgyptianMobileNumber(15));\r",
									"//=================================================================================================\r",
									"function generateRandomId(length) {\r",
									"  const numbers = '0123456789';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * numbers.length);\r",
									"    randomId += numbers[randomIndex];\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"pm.collectionVariables.set(\"Updated_id\",generateRandomId(3)) \r",
									"pm.collectionVariables.set(\"Updated_userStatus\",generateRandomId(2))\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][23.1CreateUserArr][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][1.1CreateNewPet][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('User_id'))\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][2.1AddPetOrder][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"/*Check Update done correctlly\r",
									"pm.test(\"[2.Store][1.4UpdatePet][TC6]- heck Update done correctlly \", function () {\r",
									"const request1 = {\r",
									"  url: 'https://petstore.swagger.io/v2/order/'+pm.collectionVariables.get('OrderID'),method: 'DELETE',\r",
									"  headers: {'Content-Type': 'application/json'}};\r",
									"\r",
									"pm.sendRequest(request1, (err, data) => {\r",
									"  if (err) {\r",
									"    console.error('Error:', err);\r",
									"    return;\r",
									"  }\r",
									"const res= data.json();\r",
									"//pm.expect(res.code).to.be.equal(1)\r",
									"//pm.expect(res.type).to.be.equal(\"error\")\r",
									"//pm.expect(res.message).to.be.equal(\"Order not found\")\r",
									"});*/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{User_id}},\r\n    \"username\": \"{{userName}}\",\r\n    \"firstName\": \"{{Updated_firstName}}\",\r\n    \"lastName\": \"{{Updated_lastName}}\",\r\n    \"email\": \"{{Updated_email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{Updated_phone}}\",\r\n    \"userStatus\": {{Updated_userStatus}}\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/v2/user/{{userName}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][[3.6DeleteUser][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.6DeleteUser][TC5]-Check code value is 1 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(1)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.6DeleteUser][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.6DeleteUser][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/v2/user/{{username}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC1]- Status code is 2oo\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][[3.7Login][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.7Login][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.7Login[TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.7Login][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.7Login][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.7Login][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.7Login][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.7Login][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.7Login][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.7Login][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.7Login][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is contain \"user session\"\r",
									"pm.test(\"[3.User][3.7Login][TC16]- Check message conaton user id  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.contains(\"user session\")\r",
									"}); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/v2/user/login?username={{username}}&password={{password}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.8Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.6DeleteUser][TC1]- Status code is 2oo\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][[3.7Login][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.7Login][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value is 1 \r",
									"pm.test(\"[3.User][3.7Login[TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.7Login][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.7Login][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.7Login][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.7Login][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.7Login][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.7Login][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.7Login][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.7Login][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.7Login][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is ok\r",
									"pm.test(\"[3.User][3.7Login][TC16]- Check message conaton user id  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(\"ok\")\r",
									"}); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "acc",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/v2/user/logout",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"v2",
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PetID",
			"value": ""
		},
		{
			"key": "category_name",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "tags_name",
			"value": ""
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "tags_id",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "photo_Urls",
			"value": ""
		},
		{
			"key": "updatedName",
			"value": ""
		},
		{
			"key": "UpdatedStatus",
			"value": ""
		},
		{
			"key": "pet_id",
			"value": ""
		},
		{
			"key": "pet_status",
			"value": ""
		},
		{
			"key": "complete_status",
			"value": ""
		},
		{
			"key": "OrderID",
			"value": ""
		},
		{
			"key": "order_PetId",
			"value": ""
		},
		{
			"key": "quantity",
			"value": ""
		},
		{
			"key": "shipDate",
			"value": ""
		},
		{
			"key": "Store_status",
			"value": ""
		},
		{
			"key": "StoreStatus",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "rIy#WhGGb<W=[:L",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "9;po[hX^FN5z[&T",
			"value": ""
		},
		{
			"key": "eiS^Y5Fs:C*OW4S",
			"value": ""
		},
		{
			"key": "userStatus",
			"value": ""
		},
		{
			"key": "V.9mWS&Nso]@-nj",
			"value": ""
		},
		{
			"key": "+Mnq_5Rs:C25w*7",
			"value": ""
		},
		{
			"key": "gT89]E@VWw_Ls{<",
			"value": ""
		},
		{
			"key": "e/rj%K$4qP-4}m(",
			"value": ""
		},
		{
			"key": "i,w|$}7P/5VXv|Z",
			"value": ""
		},
		{
			"key": "]>zY0U%+K%&Zf6P",
			"value": ""
		},
		{
			"key": "i6@s7fIN&2H3\"qZ",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "Updated_firstName",
			"value": ""
		},
		{
			"key": "Updated_lastName",
			"value": ""
		},
		{
			"key": "Updated_userName",
			"value": ""
		},
		{
			"key": "Updated_email",
			"value": ""
		},
		{
			"key": "Updated_password",
			"value": ""
		},
		{
			"key": "Updated_phone",
			"value": ""
		},
		{
			"key": "Updated_id",
			"value": ""
		},
		{
			"key": "Updated_userStatus",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "User_id",
			"value": ""
		}
	]
}